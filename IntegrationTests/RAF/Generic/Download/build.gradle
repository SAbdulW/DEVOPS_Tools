/* Artifactory configuration - BEGIN - Generated by Gradle - Gradle Build Scripts tool*/
buildscript {
                repositories {
                                maven {
                                                //url "${artifactory_contextUrl}/remote-repos"
                                                url "${artifactory_contextUrl}plugins-release"
                                                credentials {
                                                                username = "${artifactory_user}"
                                                                password = "${artifactory_password}"
                                                }
                                }
                }
                dependencies {
                                classpath (group: 'org.jfrog.buildinfo', name: 'build-info-extractor-gradle', version: '2.2.4')
                                classpath 'org.batcha.gradle.plugins:git-dependencies:0.2'
                                classpath "net.saliman:gradle-cobertura-plugin:2.2.2"
                }
}

apply plugin: 'maven'


repositories {
        //Resolving the artifact from the release repo, the one promoted by team
        maven {
            url "${artifactory_contextUrl}automation-release/"
            credentials {
                username = "${artifactory_user}"
                password = "${artifactory_password}"
            }
        }
}

configurations {
                rafConfig
				rafScripts
				rafProducts
}

dependencies {
                rafConfig (group: 'com.verint.automation', name: 'RegressionAutomationFramework', version: "${rafVersion}", ext: 'zip')
                rafScripts (group: 'com.verint.automation', name: 'TestsScripts', version: "${rafScriptsVersion}", ext: 'zip')
                rafProducts (group: 'com.verint.automation', name: 'raf_products', version: "${rafProductsVersion}", ext: 'zip')
}



ext.RafDIR = "${rafdir}"
ext.ScriptsDir="${rafdir}/Regression Automation Framework/workflows"
ext.LibDir="${rafdir}/Regression Automation Framework/lib"

// unzip 
task unzipRaf(type:Copy) {
                from {
                                configurations.rafConfig.collect{zipTree(it)}
                }
                into RafDIR        
}
task unzipScripts(type:Copy) {
                from {
                                configurations.rafScripts.collect{zipTree(it)}
                }
                into ScriptsDir       
}
task unzipPruducts(type:Copy) {
                from {
                                configurations.rafProducts.collect{zipTree(it)}
                }
                into LibDir    
}
task installRaf {
	ant.unzip(src: project.configurations.rafConfig.find {it.name.startsWith("RegressionAutomationFramework")}, dest: "${rafdir}")
	ant.unzip(src: project.configurations.rafScripts.find {it.name.startsWith("TestsScripts")}, dest: "${rafdir}/Regression Automation Framework/workflows")
	ant.unzip(src: project.configurations.rafProducts.find {it.name.startsWith("raf_products")}, dest: "${rafdir}/Regression Automation Framework/lib")
//  unzipRaf.execute()
//  unzipPruducts.execute()
//  unzipScripts.execute()

	ant.replace(file: "${rafdir}/Regression Automation Framework/RAFReport.xsl", token: "<h3>Summary:</h3>", value: "<h3>Build#:${currentVersion} - Summary:</h3>")
}
