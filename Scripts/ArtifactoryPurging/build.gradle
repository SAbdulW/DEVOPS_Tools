import groovy.json.JsonSlurper


ext.supportedGradleVersion = '2.3'

allprojects {
	apply plugin: 'idea'
	group = 'com.verint.artifactorypurging'
	version = currentVersion
}

// Get list of repositories from Artifactory, write the list into a file
task artifactoryPurgingTask() <<{

   // artifactorySearch ("ci-release", 1)
    //List resultsList = artifactorySearch ("devops", 1, "com/verint/puppet/logs")
    //List resultsList = artifactorySearch ("ci-snapshot", 1, "com/verint")
    //deleteItems(resultsList)

    logger.quiet("\nArtifactoryPurging: ****************************************************************************")
    logger.quiet("ArtifactoryPurging: *                     PURGING                                                *")
    logger.quiet("\npurgingRepos: ${purgingRepos}")
    logger.quiet("\npurgingDateToKeeps: ${purgingDateToKeeps}")
    logger.quiet("\npurgingPathMatch: ${purgingPathMatch}")
    logger.quiet("\nlastItemToKeep: ${topToKeep}")
    logger.quiet("ArtifactoryPurging: *                                                              *")
    logger.quiet("\nArtifactoryPurging: ****************************************************************************")

    logger.quiet ("$purgingRepos")
    logger.quiet ("$purgingDateToKeeps")
    logger.quiet ("$purgingPathMatch")

    artifactoryPurging ("$purgingRepos", "$purgingDateToKeeps", "$purgingPathMatch")
}

def artifactoryPurging (String repos, String dayToKeeps, String pathMatches){
    def reposList= repos.split(',')
    def dayToKeepsList = dayToKeeps.split(',')
    def pathMatchesList = pathMatches.split(',')

    if ((reposList.length != dayToKeepsList.length)||(reposList.length !=pathMatchesList.length)){
        logger.quiet ("         ### ERROR: Wrong configuration, mismatch two lists of repos")
    }else{
        for (int i=0; i< reposList.length; i++){
            String repoKey = reposList[i]
            String dayToKeep = dayToKeepsList[i]
            String pathMatch = pathMatchesList[i]
            logger.quiet ("$repoKey")
            logger.quiet ("$dayToKeep")
            logger.quiet ("$pathMatch")

            List resultsList = artifactorySearch (reposList[i], dayToKeep.toInteger(), pathMatchesList[i])
            deleteItems(resultsList, repoKey)
        }
    }
}

def String executeAQL(String query){
    logger.quiet("\nArtifactoryPurging: ****************************************************************************")
    logger.quiet("ArtifactoryPurging: *                     Execute AQL :                                          *")
    logger.quiet("\n${query}")
    logger.quiet("ArtifactoryPurging: *                                                              *")
    logger.quiet("\nArtifactoryPurging: ****************************************************************************")

    String filePath =""
    File tempArtifactsList = File.createTempFile("aqlResult",".result");
    filePath = tempArtifactsList.getAbsolutePath()
    filePath = filePath.replaceAll("\\\\","/")

    File aqlQueryFile=File.createTempFile("aqlQueryFile",".query");
    String aqlQueryFilePath = aqlQueryFile.getAbsolutePath()
    aqlQueryFilePath = aqlQueryFilePath.replaceAll("\\\\","/")

    aqlQueryFile.text = "${query}"

    String sCmd = ""

    sCmd = "curl -f -X POST -u \"" + "$uname" + "\":\"" + "$pword" + "\" \"$contextURL/api/search/aql\" -T\"${aqlQueryFilePath}\"  -o \"$filePath\""
    logger.quiet("ArtifactoryPurging: * Command to execute: ${sCmd}")

    String rtnCode=""
    try {
        exec {
            commandLine 'sh', '-c', sCmd
        }
    }
    catch (Exception e) {
        logger.quiet ("ArtifactoryPurging: some " + e.toString())

    }

    //executeOnShellFile sCmd

    //def inputJSON = new JsonSlurper().parseText(tempArtifactsList.text)
    String rtnText = tempArtifactsList.text
    tempArtifactsList.delete()
    aqlQueryFile.delete()
    //return inputJSON
    return rtnText
}

def List artifactorySearch(String repoKey, int lastNumDays, String repoPath ){
    logger.quiet("\nArtifactoryPurging: ****************************************************************************")
    logger.quiet("ArtifactoryPurging: *                     Search artifact from repo: ${repoKey}         *")
    logger.quiet("\nArtifactoryPurging: ****************************************************************************")
    def selectedDate = new Date() -lastNumDays
    String selectedDateString = selectedDate.format("yyyy-MM-dd hh:mm:ss")
    selectedDateString = selectedDateString.replaceAll(" ","T")
    //String selectedDateString = selectedDate.format("yyyy-MM-dd")
    //String selectedDateString = "2015-07-28T00:00:00.000-00:00"
    logger.quiet("ArtifactoryPurging: *                     Selected Date : ${selectedDateString}*")
    String notMatch="maven-metadata.xml"
    String aqlQuery= "items.find(\n" +
            "    {\n" +
            "        \"repo\":{\"\$eq\":\"${repoKey}\"}\n" +
            "        ,\"created\":{\"\$lt\":\"${selectedDateString}\"}" +
            "        ,\"path\":{\"\$match\":\"${repoPath}*\"}" +
            "        ,\"name\":{\"\$nmatch\":\"${notMatch}*\"}" +
            "    }\n" +
            ")"

    def String resultsJsonText=executeAQL(aqlQuery)
    def resultsJson = new JsonSlurper().parseText(resultsJsonText)

    List resultsList  = resultsJson.results
    //logger.quiet("Result:\n" + resultsList)
    File searchResultFile = new File ("searchResult.json")
    searchResultFile.text = "${resultsJsonText}"

    return resultsList
}

def deleteItems(List resultsList, String repoKey){
    String strResult=""
    String itemURI = ""

    File fDelete = new File ("$projectDir/${repoKey}_deleteList.log")
    File fToBeDelete = new File ("$projectDir/${repoKey}_2bDeleteList.log")
    File fExcluded = new File ("$projectDir/${repoKey}_excludedList.log")

    fDelete.write "List of item DELETED: \nMatch:$purgingPathMatch \nExlude:$purgingExcluded \n"
    fToBeDelete.write "List of item TO BE DELETED: \nMatch:$purgingPathMatch \nExlude:$purgingExcluded \n"
    fExcluded.write "Excluding list: \nExlude item match:$purgingExcluded \n"
    fExcluded << "And list top ${topToKeep} item to keep\n"

    List latestList = getLatestArtifacts (resultsList, "$topToKeep".toInteger(), repoKey,fExcluded )
//TODO : Uncomment it out
    resultsList.each { resultItem ->
        //itemURI =deleteItem (resultItem)
        String itemPath = resultItem."path";

        if( (resultItem."name" != "maven-metadata.xml") && ((itemPath.contains("/15") || (itemPath.contains("/11")))) && !isInList(latestList,itemPath)) {
            itemURI = deleteItemFolder(resultItem, fDelete, fToBeDelete, fExcluded)
            strResult = strResult + "\n${itemURI}"
        }
    }

}
def deleteItem(Object itemToDelete){
    String itemToDeleteURI = "${contextURL}" + "/" + itemToDelete."repo" + "/" +  itemToDelete."path" //+ "/" + itemToDelete."name"
    logger.info("Deleting URI...:  ${itemToDeleteURI} ")

    itemToDeleteURI=itemToDeleteURI.replaceAll(" ", "%20" )

    String sCmd = ""

    sCmd = "curl -f -X DELETE -u \"" + "$uname" + "\":\"" + "$pword" + "\" \"${itemToDeleteURI}\" "
    logger.info("ArtifactoryPurging: * Command to delete: ${sCmd}")

    String rtnCode=""
    try {
        exec {
            if (!("${viewOnly}".toBoolean())) {
                //commandLine 'sh', '-c', sCmd
                logger.info("************ArtifactoryPurging: ${itemToDeleteURI} is DELETED")
            }else{
                logger.info("************ArtifactoryPurging: ${itemToDeleteURI} is TO BE DELETED")
            }

        }
    }
    catch (Exception e) {
        logger.info("************ArtifactoryPurging: ${itemToDeleteURI} is FAILED deleted")
        logger.info ("ArtifactoryPurging: some " + e.toString())

    }
    return itemToDeleteURI
}

def deleteItemFolder(Object itemToDelete, File fDelete, File fToBeDeleted,  File fExcluded){

    String itemPath= itemToDelete."path"
    int lastIndex = itemPath.lastIndexOf("/")
    //String itemPathFolder = itemPath.substring(0,lastIndex)
    //To delete the whole folder
    String itemPathFolder = itemPath
    String itemFolderToDeleteURI = "${contextURL}" + "/" + itemToDelete."repo" + "/" +  itemPathFolder //+ "/" + itemToDelete."name"
    //logger.info("Deleting URI Folder...:  ${itemFolderToDeleteURI} ")

    itemFolderToDeleteURI=itemFolderToDeleteURI.replaceAll(" ", "%20" )

    String sCmd = ""

    sCmd = "curl -f -X DELETE -u \"" + "$uname" + "\":\"" + "$pword" + "\" \"${itemFolderToDeleteURI}\" "
    //logger.info("ArtifactoryPurging: * Command to delete: ${sCmd}")

    String rtnCode=""
    try {
        if (!matchPurgingExcluded("${purgingExcluded}",itemFolderToDeleteURI,fExcluded)) {
            if (!("${viewOnly}".toBoolean())) {
                exec {
                    commandLine 'sh', '-c', sCmd
                    logger.info("************ArtifactoryPurging: ${itemFolderToDeleteURI} is DELETED")
                    fDelete << "${itemFolderToDeleteURI}\n"
                }
            } else {
                logger.info("************ArtifactoryPurging: ${itemFolderToDeleteURI} is TO BE DELETED")
                fToBeDeleted << "${itemFolderToDeleteURI}\n"
            }
        }else{

        }
    }
    catch (Exception e) {
        logger.info("************ArtifactoryPurging: ${itemFolderToDeleteURI} is FAILED deleted")
        logger.info ("ArtifactoryPurging: some " + e.toString())
        //throw new GradleException ("${e}")

    }
    return itemFolderToDeleteURI
}

def boolean matchPurgingExcluded(String purgingExcluded, String uriToCheck, File fExcluded){
    def purgingExcludedList= purgingExcluded.split(',')
    boolean foundIt=false
    purgingExcludedList.each { purgingExcludedItem ->
        if (!foundIt){
            if (uriToCheck.contains("${purgingExcludedItem}")){
                foundIt=true
                logger.info("************ArtifactoryPurging: ${uriToCheck} is EXCLUDED, match the ${purgingExcludedItem}")
                fExcluded << "${uriToCheck} is EXCLUDED, match the ${purgingExcludedItem}\n"
            }
        }
    }

    return foundIt
}


def List getLatestArtifacts(List resultsList, int topElement, String repoKey, File fKeep){
    def mapLastItems = [:]
    def mapLastItemsKeep = [:]
    def mapLastItemsGo = [:]

    resultsList.each { resultItem ->
        //itemURI =deleteItem (resultItem)
        String itemPath = resultItem."path";

        if( (resultItem."name" != "maven-metadata.xml") && ((itemPath.contains("/15") || (itemPath.contains("/11"))))) {
            mapLastItems= putToTheMap(mapLastItems, itemPath, repoKey)
        }
    }

    mapLastItems.each { itemPathRoot, listItems ->
        //List listToKeep = listItems.sort().take(topElement)
        List listToKeep = listItems.reverse().take(topElement)

       // List listToGo = listItems.sort().drop(topElement)
        mapLastItemsKeep.put (itemPathRoot,listToKeep )
       // mapLastItemsGo.put (itemPathRoot, listToGo)
    }

//    File fKeep = new File ("$projectDir/${repoKey}_keepList.log")
    //File fGo = new File ("$projectDir/goList.log")

    fKeep << "************************************************\n"
    fKeep << "List top ${topElement} item to keep\n"
    fKeep << "************************************************\n"
    //fGo.write "List item to be consider original \n"

    def rtnList = []

    mapLastItemsKeep.each {  itemPathRoot, listItems ->
        fKeep << "========================Item: ${itemPathRoot}\n"
        listItems.each { item ->
            fKeep << "${item}\n"
            rtnList.add (item)
        }
    }

//    logger.quiet("${mapLastItemsGo}")
//    mapLastItemsGo.each {  itemPathRootGo, listGoItems ->
//        logger.quiet("${itemPathRootGo}")
//        logger.quiet("${listGoItems}")
//
//        listGoItems.each { itemGo ->
//            fGo << "${itemGo}"
//        }
//    }
    return rtnList
}

def putToTheMap (Object mapLastItems, String itemPath, String repoKey ){

    int lastIndex = itemPath.lastIndexOf("/")
    String itemPathRoot = itemPath.substring(0,lastIndex)

    if (repoKey=="devops"){
        lastIndex = itemPathRoot.lastIndexOf("/")
        itemPathRoot = itemPathRoot.substring(0,lastIndex)
    }

    logger.quiet ("$itemPathRoot:$itemPath")
    List mapLastItem = []
    mapLastItem = mapLastItems.get(itemPathRoot);

    if (mapLastItem!=null){
        if (!isInList(mapLastItem, itemPath)) {
            mapLastItem.add(itemPath)
            mapLastItems.put(itemPathRoot, mapLastItem)
        }
    }else{
        List mapLastItemNew =[]
        mapLastItemNew.add(itemPath)
        mapLastItems.put(itemPathRoot,mapLastItemNew)
    }

    return mapLastItems
}

def isInList(Object listItems, String item){
    boolean rtnValue = false;
    listItems.each { listItem ->
        if (!rtnValue && (listItem==item)) {
            rtnValue=true
        }
    }

    return rtnValue;

}

task wrapper(type: Wrapper) {
	gradleVersion = supportedGradleVersion
}