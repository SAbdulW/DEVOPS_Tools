version = currentVersion
group = groupId
project.ext.set("archivesBaseName", "${EARName}");

/* Artifactory configuration - BEGIN - Generated by Gradle - Gradle Build Scripts tool*/
buildscript {
	repositories {
		maven {
			url "${artifactory_contextUrl}/plugins-release"
			credentials {
				username = "${artifactory_user}"
				password = "${artifactory_password}"
			}
		}
	}
	dependencies {
		classpath(group: 'org.jfrog.buildinfo', name: 'build-info-extractor-gradle', version: '2.2.4')
		classpath 'org.batcha.gradle.plugins:git-dependencies:0.2'
	}
}

apply plugin: 'maven'
apply plugin: 'java'

if (env.equals('flow')) {
	apply plugin: 'artifactory'
}

repositories {
	//Resolving the artifact from the release repo, the one promoted by team
	maven {
		url "${artifactory_contextUrl}/${artifactory_resolveRepo}"
		credentials {
			username = "${artifactory_user}"
			password = "${artifactory_password}"
		}
	}
}

dependencies {
	if ("${iServerVersion}".trim()!="") {
		compile(group: 'com.verint.iserver.frameworkintegrationserver.components', name: 'Framework Integration Server', version: "${iServerVersion}")
	}else{
		compile(group: 'com.verint.iserver.frameworkintegrationserver.components', name: 'Framework Integration Server', version: "${fisVersion}")
	}
}

def wfoEAR = file("${buildDir}\\${EARName}.ear")
def wfoPOM = file("${buildDir}\\${EARName}.pom")

artifacts {
	archives file: wfoEAR, name: "${EARName}", type: 'ear'
	archives file: wfoPOM, name: "${EARName}", type: 'pom'
}

if (env.equals('flow')) {
	artifactory {
		publish {
			contextUrl = "${artifactory_contextUrl}"	// The base Artifactory URL if not overridden by the publisher/resolver
			repository {
				repoKey = "${publishRepo}"
				username = "${artifactory_user}"
				password = "${artifactory_password}"
				maven = true
			}
			defaults {
				publishPom = false
			}
		}


		resolve {
			contextUrl = "${artifactory_contextUrl}"	// The base Artifactory URL if not overridden by the publisher/resolver
			repository {
				repoKey = "${artifactory_resolveRepo}"
				username = "${artifactory_user}"
				password = "${artifactory_password}"
				maven = true
			}
			repository {
				repoKey = 'plugins-release'
				username = "${artifactory_user}"
				password = "${artifactory_password}"
				maven = true
			}
		}
	}
}

import groovy.json.JsonSlurper

def getJsonObjectFromFile(String jsonFileLocation) {
	def jsonFile = new File(jsonFileLocation)
	def InputJSON = new JsonSlurper().parseText(jsonFile.text)
	return InputJSON
}

task mainTest << {
	String strVersion =  getInstalledVersionFromRegistry(componentName, vmIP, vmUser, vmPw)
	logger.quiet ("Version of ${componentName} : ${strVersion} " )
}

task copyEAR() {
	doFirst {
		ant.exec(executable: "cmd", failonerror:"false") {
			arg line: '/c'
			arg line: "net use \\\\${vmIP}\\C\$ /user:${vmUser} ${vmPw}"
		}
		logger.info ("DeployEAR: copying file from " + "\\\\${vmIP}\\C\$\\Impact360\\Software\\ProductionServer\\weblogic\\Impact360\\wfoSuite.ear" + " To: ${buildDir}\\wfoSuite.ear")

		ant.copy (file: "\\\\${vmIP}\\C\$\\Impact360\\Software\\ProductionServer\\weblogic\\Impact360\\wfoSuite.ear", tofile: "${buildDir}\\wfoSuite.ear",overwrite:true, verbose: true, force: true)
	}
}
task updatePOM() {
	doFirst {
		def objRegJson
		String installedVersion

		if ("${iServerVersion}".trim()!=""){
			installedVersion =  "${iServerVersion}".trim()
		}else{
			objRegJson = getJsonObjectFromFile("${regJsonPath}/${regJsonFile}")
			installedVersion = objRegJson."{4E693109-AB2D-41D8-A88D-1506E0D654B9}"."InstalledVersion"
		}
		ant.copy (file: "${projectDir}/pom-default-orig.xml", tofile: "${buildDir}/pom-default1.xml", overwrite:true, verbose: true, force: true)
		ant.replace(file: "${buildDir}/pom-default1.xml", token: "<version1></version1>", value: "<version>${currentVersion}</version>")
		ant.replace(file: "${buildDir}/pom-default1.xml", token: "<version2></version2>", value: "<version>${installedVersion}</version>")
		ant.rename(src: "${buildDir}/pom-default1.xml", dest: "${buildDir}/${EARName}.pom")
	}
}

copyEAR.dependsOn updatePOM
artifactoryPublish.dependsOn copyEAR


def getInstalledVersionFromRegistry(String strComponentName, String strVmIP, String strVmUser, String strVmPwd){

	def String strJsonText = "{\n" +
			"    \"componentID\": \"${strComponentName}\"\n" +
			"}"
	def jsonFile = pwd() + "\\$regInfo.dat"
	writeFile file: jsonFile, text: strJsonText
	def psFile = pwd() + "\\util\\GetInstalledVersionFromRegistry.ps1"
	def psScript = "-File ${psFile} -vmIP ${strVmIP} -vmUser ${strVmUser} -vmPwd ${strVmPwd} -jsonPath ${jsonFile}"
	logger.info ("Running ${psFile} script ...")
	def resultCode = bat(script: "powershell $psScript", returnStatus: true)
	if (resultCode != 0) {
		logger.error ( "[zDevLib:verifyInstalledKBList]: GetInstalledVersionFromRegistry powershell script exit with error: ${resultCode}")
		throw new Exception ("Error in executing powwershell")
	}
	def resultText = readFile("${jsonFile}").toString()
	def jsonData = new JsonSlurper().parseText(resultText)


	return jsonData.ComponentVersion

}