version = currentVersion
group = groupId
project.ext.set("archivesBaseName", "${EARName}");

/* Artifactory configuration - BEGIN - Generated by Gradle - Gradle Build Scripts tool*/
buildscript {
	repositories {
		maven {
			url "${artifactory_contextUrl}/plugins-release"
			credentials {
				username = "${artifactory_user}"
				password = "${artifactory_password}"
			}
		}
	}
	dependencies {
		classpath(group: 'org.jfrog.buildinfo', name: 'build-info-extractor-gradle', version: '2.2.4')
		classpath 'org.batcha.gradle.plugins:git-dependencies:0.2'
	}
}

apply plugin: 'maven'
apply plugin: 'java'

if (env.equals('dev')) {
	apply plugin: 'artifactory'
}

repositories {
	//Resolving the artifact from the release repo, the one promoted by team
	maven {
		url "${artifactory_contextUrl}/ci-release"
		credentials {
			username = "${artifactory_user}"
			password = "${artifactory_password}"
		}
	}
}

dependencies {
	compile(group: 'com.verint.iserver.frameworkintegrationserver.components', name: 'Framework Integration Server', version: "${fisVersion}")
}

def wfoEAR = file("${EARName}.ear")
def wfoPOM = file("${EARName}.pom")

artifacts {
	archives file: wfoEAR, name: "${EARName}", type: 'ear'
	archives file: wfoPOM, name: "${EARName}", type: 'pom'
}

if (env.equals('dev')) {
	artifactory {
		publish {
			contextUrl = "${artifactory_contextUrl}"	// The base Artifactory URL if not overridden by the publisher/resolver
			repository {
				repoKey = "${publishRepo}"
				username = "${artifactory_user}"
				password = "${artifactory_password}"
				maven = true
			}
		}
		resolve {
			contextUrl = "${artifactory_contextUrl}"	// The base Artifactory URL if not overridden by the publisher/resolver
			repository {
				repoKey = 'repo'
				username = "${artifactory_user}"
				password = "${artifactory_password}"
				maven = true
			}
			repository {
				repoKey = 'plugins-release'
				username = "${artifactory_user}"
				password = "${artifactory_password}"
				maven = true
			}
		}
	}
}

import groovy.json.JsonSlurper

def getJsonObjectFromFile(String jsonFileLocation) {
	def jsonFile = new File(jsonFileLocation)
	def InputJSON = new JsonSlurper().parseText(jsonFile.text)
	return InputJSON
}

task updatePOM() {
	doFirst {
		def objRegJson = getJsonObjectFromFile("${projectDir}/../GradleUtils/PPLogs/registryExport.json")
		String installedVersion = objRegJson."{4E693109-AB2D-41D8-A88D-1506E0D654B9}"."InstalledVersion"

		ant.replace(file: "${projectDir}/pom-default.xml", token: "<version1></version1>", value: "<version>${currentVersion}</version>")
		ant.replace(file: "${projectDir}/pom-default.xml", token: "<version2></version2>", value: "<version>${installedVersion}</version>")
		//ant.replaceregexp (file: "${projectDir}/build/poms/pom-default.xml", match: "Framework Integration Server", replace:"FrameworkIntegrationServer", byline:"true")
		ant.rename(src: "${projectDir}/pom-default.xml", dest: "${projectDir}/${EARName}.pom")
	}
}