import groovy.json.JsonSlurper

buildscript {
    repositories {
        maven {
            url 'http://atlartifactory:8081/artifactory/plugins-release'
            credentials {
                username = "${artifactory_user}"
                password = "${artifactory_password}"
            }
        }
    }
    dependencies {
        classpath 'com.verint.plugins:vebutu-plugin:latest.release'

    }
}

apply plugin: 'vebutu'

ext.supportedGradleVersion = '1.12'


allprojects {
	apply plugin: 'idea'
	group = 'com.verint.devops.gradleutils'
	version = currentVersion
}


repositories {
    //Resolving the artifact from the release repo, the one promoted by team
    maven {
        url "${artifactory_contextUrl}/plugins-release"
        credentials {
            username = "${artifactory_user}"
            password = "${artifactory_password}"
        }
    }
}

configurations {
    envConfig
}

dependencies {
    envConfig 'com.microsoft.technet.sysinternals:PSTools:2.11@zip'
}

// prepare environment, getting the tools
task init() << {
    ant.unzip(src: project.configurations.envConfig.find {it.name.startsWith("PSTools-")}, dest: "${projectDir}/Pstools/") { patternset { include(name:"PsExec.exe")}}
}

task runPuppetAgent(dependsOn: 'init') << {
    logger.quiet ("GradleUtils: run the puppet agent")
    runPuppetAgentCommand "$puppetServer", "$certname","$environment","$vmIP","$vmUser","$vmPw"
}
// Get list of repositories from Artifactory, write the list into a file

def runPuppetAgentCommand (String iPuppetServer, String iCertName, String iEnvironment, String iVmIP, String iUser, String iPw) {
    File ppCommandFile = File.createTempFile("ppCmd",".bat");
    ppFilePath = tempArtifactsList.getAbsolutePath()
    ppFilePath = ppFilePath.replaceAll("\\\\","/")

    String sCmd = ""
    // CommandLine to execute in the agent
    sCmd = "cmd /c puppet agent --test --server=${iPuppetServer} --certname=${iCertName} --environment=${iEnvironment} --debug"
    ppCommandFile.text = sCmd
    //Create the psexec command
    sPsExecCmd ="${projectDir}/Pstools/PsExec.exe -c -f \\\\${iVmIP} -u ${iVmIP}\\${iUser} -p ${iPw} -h \"${ppFilePath}\""

    logger.quiet ("GradleUtils: ")
    //executeOnShellFile sCmd
    //ppCommandFile.delete()
}

def executeOnShellFile(String command){
    File temp = File.createTempFile("cish",".sh");
    temp.write(command)
    //println "             *************Temp command: ******:" + temp.getAbsolutePath()

    filePath = temp.getAbsolutePath()
    filePath = filePath.replaceAll("\\\\","/")
    println "             *************Temp command: ******:" + filePath

    executeOnShell filePath
    //TODO: uncomment code bellow
    //temp.delete()
}

def executeOnShell(String command) {

    return executeOnShell(command, new File(System.properties.'java.io.tmpdir'))
}

def executeOnShell(String command, File workingDir) {
    println "---CommandToExecute:" + command
    def process = new ProcessBuilder(addShellPrefix(command))
            .directory(workingDir)
            .redirectErrorStream(true)
            .start()
    process.inputStream.eachLine {println it}
    process.waitFor();
    return process.exitValue()
}

def addShellPrefix(String command) {
    commandArray = new String[3]
    commandArray[0] = "sh"
    commandArray[1] = "-c"
    commandArray[2] = command
    return commandArray
}

//Execute directly

def executeAsIs(String command) {
    println "---CommandAsIsToExecute:" + command
    def process = "$command".execute()
    process.text.eachLine {println it}
    process.waitFor();
    return process.exitValue()
}

def boolean containsPrefixes(String srcString, String prefixes)
{
    def prefixesList= prefixes.split("##")
    //println ("    -------Check if : " + srcString + " has the :" + prefixes)
    boolean hasIt=false
    for (int i=0; i< prefixesList.length; i++) {
        String strTest=prefixesList[i]
        //println (" -------strTest: " + strTest)
        if (srcString.contains(strTest))
        {
            hasIt = true
            break
        }
    }

    return hasIt
}

task wrapper(type: Wrapper) {
	gradleVersion = supportedGradleVersion
}


//reference
