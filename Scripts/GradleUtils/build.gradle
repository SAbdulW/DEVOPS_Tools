import groovy.json.JsonSlurper

buildscript {
    repositories {
        maven {
            url "${artifactory_contextUrl}/plugins-release"
            credentials {
                username = "${artifactory_user}"
                password = "${artifactory_password}"
            }
        }
    }
    dependencies {
        classpath 'com.verint.plugins:vebutu-plugin:latest.release'
    }
}

apply plugin: 'vebutu'

ext.supportedGradleVersion = '2.3'

allprojects {
	apply plugin: 'idea'
	group = groupID
	version = currentVersion
}

repositories {
    //Resolving the artifact from the release repo, the one promoted by team
    maven {
        url "${artifactory_contextUrl}/ci-wfo-puppet-repos"
        credentials {
            username = "${artifactory_user}"
            password = "${artifactory_password}"
        }
    }
}

configurations {
    envConfig
}

dependencies {
    envConfig 'com.microsoft.technet.sysinternals:PSTools:2.11@zip'
    envConfig 'com.poweradmin:paexec:1.26@zip'
}

// prepare environment, getting the tools
task init() << {
    ant.unzip(src: project.configurations.envConfig.find {it.name.startsWith("PSTools-")}, dest: "${projectDir}\\Pstools\\") { patternset { include(name:"PsExec.exe")}}
    ant.unzip(src: project.configurations.envConfig.find {it.name.startsWith("paexec")}, dest: "${projectDir}\\PAExec\\")
}

task runPuppetAgent(dependsOn: 'init') << {
    logger.quiet ("GradleUtils: run the puppet agent")
    def String[] yamlFiles = "${yamlFiles}".split(',');
	for (String yamlSrcPath : yamlFiles){
		logger.quiet ("Yaml = ${yamlSrcPath}")

		String pp_timestamp= Calendar.getInstance().getTimeInMillis();
		// Replace the yaml content with the new build number and create the yaml file
		String strSearch="\${MasterBuildVersion}"
		String certname="${environment}_${pp_timestamp}"
		logger.quiet ("GradleUtils: certname:${certname}")

		createYAML ("${currentVersion}", "${yamlSrcPath}", "${yamlDestPath}\\${certname}.yaml")

		runPuppetAgentCommand "$puppetServer", "$certname","$environment_base","$vmIP","$vmUser","$vmPw"

		runPuppetAgentCommand "$puppetServer", "$certname","$environment","$vmIP","$vmUser","$vmPw"
    }

    if ("${deployEarFile}".toBoolean()){
		runDeployEar (vmIP, vmUser,  vmPw)
        restartWFOService (vmIP, vmUser,  vmPw)
    }

	//wait for the application ready

    if ("${chkApp}".toBoolean())
    waitAppReady "$vmIP"
}

task deployEar(dependsOn: 'init') << {
	runDeployEar (vmIP, vmUser,  vmPw)
}

task restartWFO(dependsOn: 'init') << {
    restartWFOService (vmIP, vmUser,  vmPw)
}


// Get list of repositories from Artifactory, write the list into a file
def runPuppetAgentCommand (String iPuppetServer, String iCertName, String iEnvironment, String iVmIP, String iUser, String iPw) {
    String sCmd = ""
    // CommandLine to execute in the agent
    sCmd = "\"C:\\Program Files\\Puppet Labs\\Puppet\\bin\\puppet.bat\" agent --test --server=${iPuppetServer} --certname=${iCertName} --environment=${iEnvironment} --debug --detailed-exitcodes"

    //Create the psexec command
    // String sPsExecCmd ="cmd /c ${projectDir}\\Pstools\\PsExec.exe -accepteula \\\\${iVmIP} -u ${iVmIP}\\${iUser} -p ${iPw} -h ${sCmd}"
    //String sPsExecCmd ="cmd /c ${projectDir}\\Pstools\\PsExec.exe -accepteula -i \\\\${iVmIP} -u ${iVmIP}\\${iUser} -p ${iPw} -h ${sCmd}"
    String sPsExecCmd ="cmd /c ${projectDir}\\PAExec\\paexec.exe -accepteula \\\\${iVmIP} -u ${iVmIP}\\${iUser} -p ${iPw} -h ${sCmd}"

    logger.quiet ("GradleUtils: the command: ${sPsExecCmd} ")

    String rtnCode=""
    try {
        exec {
            commandLine 'cmd', '/c', sPsExecCmd
        }
    }
	catch (Exception e) {
        logger.quiet ("GradleUtils: some " + e.toString())
        rtnCode =  getRtnCode(e.toString())
    }

    logger.quiet ("GradleUtils: there were changes during the transaction: exitCode (${rtnCode})")
    //rtnCode = result.getExitValue()

    if (rtnCode=="2") {
        logger.quiet ("GradleUtils: there were changes during the transaction: exitCode (${rtnCode})")
        //throw new GradleException("GradleUtils: there were changes during the transaction: exitCode (${rtnCode})")
    }
	else if (rtnCode=="4") {
        throw new GradleException("GradleUtils: there were FAILURES during the transaction: exitCode (${rtnCode})")
        //logger.quiet ("GradleUtils: there were failures during the transaction: exitCode (${rtnCode})")
    }
	else if (rtnCode=="6") {
        throw new GradleException("GradleUtils: there were both changes and FAILURES during the transaction: exitCode (${rtnCode})")
        //logger.quiet ("GradleUtils: there were both changes and failures during the transaction: exitCode (${rtnCode})")
    }
	else {
        throw new GradleException("GradleUtils: there are FAILURES during the transaction: exitCode (${rtnCode})")
    }
    // executeOnCMDFile sPsExecCmd
    //executeAsIs sPsExecCmd
    //ppCommandFile.delete()
}

def runDeployEar ( String iVmIP, String iUser, String iPw) {
    String sCmd = ""
    // CommandLine to execute in the agent
    sCmd = "%windir%\\system32\\cscript.exe c:\\impact360\\software\\WFODeployer\\DeployWfo.vbs WLSAdmin pumpkin1 true true" 

    String sPsExecCmd ="cmd /c ${projectDir}\\PAExec\\paexec.exe -accepteula \\\\${iVmIP} -u ${iVmIP}\\${iUser} -p ${iPw} -h ${sCmd}"

    logger.quiet ("GradleUtils: the command: ${sPsExecCmd} ")

    String rtnCode=""
    try {
        exec {
	       commandLine 'cmd', '/c', sPsExecCmd
        }
    }
	catch (Exception e) {
        logger.quiet ("GradleUtils: some " + e.toString())
        rtnCode =  getRtnCode(e.toString())
    }

    logger.quiet ("GEar Deployment: exitCode (${rtnCode})")
 
    if (rtnCode!="" && rtnCode!="0" ) {
        logger.quiet ("GradleUtils: Failed with: exitCode (${rtnCode})")
        throw new GradleException("GradleUtils: Failed to deploy EAR: exitCode (${rtnCode})")
    }
}


def restartWFOService ( String iVmIP, String iUser, String iPw) {
    String sCmd = ""
    // CommandLine to execute in the agent
    //sCmd = "%windir%\\system32\\WindowsPowerShell\\v1.0\\powershell.exe -executionpolicy Unrestricted Restart-Service WFO_ProductionDomain_ProductionServer"
    sCmd = "net start WFO_ProductionDomain_ProductionServer"
	
	String sPsExecCmd ="cmd /c ${projectDir}\\PAExec\\paexec.exe -accepteula \\\\${iVmIP} -u ${iVmIP}\\${iUser} -p ${iPw} -h ${sCmd}"

    logger.quiet ("GradleUtils: the command restartWFOService: ${sPsExecCmd} ")

    String rtnCode=""

    try {
        exec {
            commandLine('cmd', '/c', sPsExecCmd)
        }

    }

	catch (Exception e) {
        logger.quiet ("GradleUtils: some " + e.toString())
        rtnCode =  getRtnCode(e.toString())
    }

    logger.quiet ("startWFOService: exitCode (${rtnCode})")

    if (rtnCode=="2"){
        logger.quiet ("GradleUtils: Exit code (2) keep going! ")
    }else if (rtnCode!="" && rtnCode!="0"  ){
        logger.quiet ("GradleUtils: Failed with: exitCode (${rtnCode})")
        throw new GradleException("GradleUtils: restartWFOService: exitCode (${rtnCode})")
    }
}

def createYAML (String strReplaceWith, String sourcePathYAML, String destPathYAML) {
    // Open the
    File sourceFile = new File (sourcePathYAML);
    File destFile =  new File (destPathYAML);
    String srcFilePath = sourceFile.getCanonicalPath()
    String destFilePath = destFile.getCanonicalPath()

    String sourceContent = sourceFile.getText("UTF-8")

    logger.quiet ("GradleUtils: sourceContent YAML at ${srcFilePath}\n${sourceContent}")

    if (sourceContent.indexOf("{MasterBuildVersion}")>0) {
        sourceContent=sourceContent.replaceAll("[\${}]","HT")

        sourceContent=sourceContent.replaceAll("HTHTMasterBuildVersionHT",strReplaceWith)
    }

    logger.quiet ("GradleUtils: updatedContent YAML at ${destFilePath} \n${sourceContent}")
    destFile.write(sourceContent,"UTF-8")
}

def getRtnCode (String strException) {
    int lastIndex =   strException.lastIndexOf("exit value")
    String strReturn=""
    if (lastIndex>0) {
        strReturn =   strException.substring(lastIndex+ "exit value".length()+1)
        //logger.quiet ("GradleUtils: strReturn=->${strReturn}<-")
    }
    return strReturn;
}

def executeOnCMDFile(String command) {
    File temp = File.createTempFile("cish",".bat");
    temp.write(command)
    //println "             *************Temp command: ******:" + temp.getAbsolutePath()

    String filePath = temp.getAbsolutePath()
    //filePath = filePath.replaceAll("\\\\","/")
    println "             *************Temp command: ******:" + filePath

    executeOnCMD filePath
    //TODO: uncomment code bellow
    //temp.delete()
}

def executeOnCMD(String command) {
    return executeOnCMD(command, new File(System.properties.'java.io.tmpdir'))
}

def executeOnCMD (String command, File workingDir) {
    println "---CommandToExecute:" + command
    def process = new ProcessBuilder(command)
            .directory(workingDir)
            .redirectErrorStream(true)
            .start()
    process.inputStream.eachLine {println it}
    //With the paexec , no need to waitFor
    //process.waitFor();
    //return process.exitValue()
}

def executeOnShellFile(String command) {
    File temp = File.createTempFile("cish",".sh");
    temp.write(command)
    //println "             *************Temp command: ******:" + temp.getAbsolutePath()

    String filePath = temp.getAbsolutePath()
    //filePath = filePath.replaceAll("\\\\","/")
    println "             *************Temp command: ******:" + filePath

    executeOnShell filePath
    //TODO: uncomment code bellow
    //temp.delete()
}

def executeOnShell(String command) {
    return executeOnShell(command, new File(System.properties.'java.io.tmpdir'))
}

def executeOnShell(String command, File workingDir) {
    println "---CommandToExecute:" + command
    def process = new ProcessBuilder(addShellPrefix(command))
            .directory(workingDir)
            .redirectErrorStream(true)
            .start()
    process.inputStream.eachLine {println it}
    process.waitFor();
    return process.exitValue()
}

def addShellPrefix(String command) {
    def commandArray = new String[3]
    commandArray[0] = "sh"
    commandArray[1] = "-c"
    commandArray[2] = command
    return commandArray
}

//Execute directly

def executeAsIs(String command) {
    println "---CommandAsIsToExecute:" + command
    def process = "$command".execute()
    process.text.eachLine {println it}
    process.waitFor();
    return process.exitValue()
}

def boolean containsPrefixes(String srcString, String prefixes) {
    def prefixesList= prefixes.split("##")
    //println ("    -------Check if : " + srcString + " has the :" + prefixes)
    boolean hasIt=false
    for (int i=0; i< prefixesList.length; i++) {
        String strTest=prefixesList[i]
        //println (" -------strTest: " + strTest)
        if (srcString.contains(strTest)) {
            hasIt = true
            break
        }
    }

    return hasIt
}

def waitAppReady (String vmIP) {
    logger.quiet ("-----Start wait login page-----")

    //waits up to 10 minutes (and checks every 500 milliseconds) for a web server on vmIP to serve up the specified URL.
    ant.waitfor (maxwait:"10", maxwaitunit:"minute", checkevery:"500", timeoutproperty:"web.timeout") {
         http (url:"http://${vmIP}/wfo/control/signin")
    }
    ant.fail (message:"Can't display the WFO Login page, time out!", if:"web.timeout")
	logger.quiet("-----Login: READY-----")
}

task wrapper(type: Wrapper) {
	gradleVersion = supportedGradleVersion
}

//reference
