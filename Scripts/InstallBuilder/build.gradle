/* Artifactory configuration - BEGIN - Generated by GRadle - Gradle Build Scripts tool*/
import groovy.json.JsonSlurper
import groovy.json.JsonBuilder

buildscript {
    repositories {
        maven {
            url 'http://atlartifactory:8081/artifactory/plugins-release'
            credentials {
                username = "${artifactory_user}"
                password = "${artifactory_password}"
            }
        }
    }
    dependencies {
        classpath(group: 'org.jfrog.buildinfo', name: 'build-info-extractor-gradle', version: '2.2.4')
        classpath "com.verint.plugins${runMode}:install-builder-plugin:latest.release"
    }
}


repositories {
    //Resolving the artifact from the release repo, the one promoted by team
    maven {
        url "${artifactory_contextUrl}/wfo-release-repos"
        credentials {
            username = "${artifactory_user}"
            password = "${artifactory_password}"
        }
    }

    maven {
        url "${artifactory_contextUrl}/plugins-release"
        credentials {
            username = "${artifactory_user}"
            password = "${artifactory_password}"
        }
    }
}
apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'artifactory'
//apply plugin: 'org.tenne.rest'
apply plugin: 'vebutu.install-builder'

ext.libConfigPath= "$rootDir/libConfigPath"
ext.supportedGradleVersion = '2.4'


installBuilder {
    kbNumber="${KbNumber}"
    product="${Product}"
    subsystem="${Subsystem}"
    kbVersion="${KbVersion}"
    branch="${Branch}"
    nofKbs="${NofKbs}"
    tags="${Tags}"
    fixIsRelevantFor="${FixIsRelevantFor}"
    buildNumber="${currentVersion}"
    msiPath="${MSIPath}"
    type="${Type}"
    email="${Email}"
    targetRelease="${TargetRelease}"
    abortOnProcessError="${AbortOnProcessError}"
}




task wrapper(type: Wrapper) {
    gradleVersion = supportedGradleVersion
}


artifactory {
    publish {
        contextUrl = "${artifactory_contextUrl}"	// The base Artifactory URL if not overridden by the publisher/resolver
        repository {
            repoKey = 'test-repo'
            //repoKey = 'devkit-dev-repo'
            username = "${artifactory_user}"
            password = "${artifactory_password}"
            maven = true
        }
    }
    resolve {
        contextUrl = "${artifactory_contextUrl}"	// The base Artifactory URL if not overridden by the publisher/resolver
        repository {
            //repoKey = 'repo'
            repoKey = 'wfo-release-repo'
            username = "${artifactory_user}"
            password = "${artifactory_password}"
            maven = true
        }
    }
}

import java.net.*;
import java.io.*;
//*******************************
import groovy.json.JsonSlurper
import groovy.json.JsonOutput

task GetKB (dependsOn: getKB)<< {
    println ("jsonKBData.KBNumber : ${zKBNumber}")
    println ("jsonObject: KBJson : ${zKBJSON}")
    exportKBOutput(zKBJSON)
}

task CreateKBBuffer (dependsOn: createKBBuffer)<< {
    println ("jsonObject: KBJson : ${zKBBufferJSON}")
    exportKBOutput(zKBBufferJSON)
}

task UpdateKBDefect (dependsOn: updateKBDefect)<< {
    println ("jsonObject: KBJson : ${zKBUpdateJSON}")
    exportResultOutput(zKBUpdateJSON)
}

task GetKBList4WFOPackage (dependsOn: getKBList4WFOPackage)<< {
    println ("jsonObject: KBJson : ${zKB4WFOJSON}")

    zKB4WFOJSON.each {comObject ->
        println ("jsonKBData.KBNumber : ${comObject.KBNumber}")
        println ("jsonObject: Subsystem : ${comObject.Subsystem}")
        println ("jsonObject: MSIPath : ${comObject.MSIPath}")

    }

    exportKB4WFOOutput(zKB4WFOJSON)
}

task testKB (dependsOn: getKB)<< {
    println ("jsonKBData.KBNumber : ${zKBNumber}")
    println ("jsonObject: KBJson : ${zKBJSON}")

    printKBData(zKBJSON)
}

task testKBBuffer (dependsOn: createKBBuffer)<< {
    //println ("jsonKBData.KBNumber : ${zKBBufferNumber}")
    println ("jsonObject: KBJson : ${zKBBufferJSON}")

    //printKBData(zKBJSON)
}

def exportKB4WFOOutput(Object jsonKBData){
    File saveDir =new File("${this.project.buildDir}")
    saveDir.mkdirs()
    String saveFileName =  "${saveDir.getCanonicalPath()}/${jsonFileName}"
    File outFile = new File (saveFileName)
    String strKBNumbers =new JsonBuilder( jsonKBData).toPrettyString()
    outFile.text=   strKBNumbers
//
//    outFile.text = "{\n" +
//            "  \"KBNumbers\": \"${strKBNumbers}\"\n" +
//            "}"
    println ("JSON Content:\n${outFile.text}")
}


def exportResultOutput(Object jsonKBData){
    File saveDir =new File("${this.project.buildDir}")
    saveDir.mkdirs()
    String saveFileName =  "${saveDir.getCanonicalPath()}/${jsonFileName}"
    File outFile = new File (saveFileName)
    String strKBNumbers = jsonKBData
    strKBNumbers = strKBNumbers.replace("[","")
    strKBNumbers = strKBNumbers.replace("]","")
    strKBNumbers = strKBNumbers.replace(";",",")
    outFile.text = "{\n" +
            "  \"KBNumbers\": \"${strKBNumbers}\"\n" +
            "}"
    println ("JSON Content:\n${outFile.text}")
}
def exportKBOutput(Object jsonKBData){
    File saveDir =new File("${this.project.buildDir}")
    saveDir.mkdirs()
    String saveFileName =  "${saveDir.getCanonicalPath()}/${jsonFileName}"
    File outFile = new File (saveFileName)
    String strKBNumbers = jsonKBData.KBNumber
    strKBNumbers = strKBNumbers.replace("[","")
    strKBNumbers = strKBNumbers.replace("]","")
    strKBNumbers = strKBNumbers.replace(";",",")
    outFile.text = "{\n" +
            "  \"KBNumbers\": \"${strKBNumbers}\"\n" +
            "}"
    println ("JSON Content:\n${outFile.text}")
}


def printKBData(Object jsonKBData){
    println ("${jsonKBData}")

    println ("jsonKBData.KBNumber : ${jsonKBData.KBNumber}")
    println ("jsonKBData.Product : ${jsonKBData.Product}")
    println ("jsonKBData.Subsystem : ${jsonKBData.Subsystem}")
    println ("jsonKBData.Version : ${jsonKBData.Version}")
    println ("jsonKBData.FixIsRelevantFor : ${jsonKBData.FixIsRelevantFor}")
    println ("jsonKBData.Tags : ${jsonKBData.Tags}")
    println ("jsonKBData.MSIPath : ${jsonKBData.MSIPath}")
    println ("jsonKBData.Type : ${jsonKBData.Type}")
    println ("jsonKBData.Branch : ${jsonKBData.Branch}")
    println ("jsonKBData.NOFKbs : ${jsonKBData.NOFKbs}")
    println ("jsonKBData.Email : ${jsonKBData.Email}")
    println ("jsonKBData.BuildNumber : ${jsonKBData.BuildNumber}")
    //println ("jsonKBData.AbortOnProcessErorr : ${jsonKBData.AbortOnProcessErorr}")
}


















































































def kbGenService(String serviceName){
    def strURL =generateURL(serviceName)
    def authenticationKBGen = "Basic " + "${kbGenUser}:${kbGenPw}".getBytes().encodeBase64().toString()

    def connection = strURL.toURL().openConnection()
    connection.setRequestMethod("POST")
    connection.setRequestProperty("Authorization",  authenticationKBGen)
    connection.setRequestProperty("Content-Type",  "text/xml; charset=UTF-8")
    connection.setRequestProperty("Content-Type",  "application/x-www-form-urlencoded")
    //connection.setRequestProperty("Content-Length",  "4096")
    connection.doOutput = true

    OutputStreamWriter osWriter = new OutputStreamWriter(
            connection.getOutputStream());
    osWriter.write("stamp");
    osWriter.close();

    BufferedReader bReader = new BufferedReader(
            new InputStreamReader(
                    connection.getInputStream()));
    String decodedString;

    String responseText = ""

    while ((decodedString = bReader.readLine()) != null) {
        responseText+=decodedString
        println (decodedString);
    }
    bReader.close();


    //File outResponseFile = new File ("${buildDir}/${serviceName}.xml")
    File outResponseFile = new File ("${serviceName}.json")
    outResponseFile.text =  responseText

    //Return json object
    def jsonSlurper = new JsonSlurper()
    def jsonRtnObj = jsonSlurper.parseText (responseText)

    return jsonRtnObj

}

def String buildParams(String sParams, String sParamName, String sParamValue){

    String strProp=""
    if (sParamValue!="") strProp="${sParamName}=${sParamValue.replace(' ', '%20')}"
    if (strProp!="") {
        if (sParams!="") sParams=sParams +  "&" + strProp
        else sParams = strProp
    }
    return sParams
}

def String generateURL(String serviceName){
    def authenticationKBGen = "Basic " + "${kbGenUser}:${kbGenPw}".getBytes().encodeBase64().toString()
    def strURL =("${kbGenUrl}/" + serviceName.replace(' ', '%20'))
    def strParams = ""

    strParams = buildParams(strParams,"KBNumber", "${KBNumber}")
    strParams = buildParams(strParams,"Product", "${Product}")
    strParams = buildParams(strParams,"Subsystem", "${Subsystem}")
    strParams = buildParams(strParams,"Version", "${Version}")
    strParams = buildParams(strParams,"FixIsRelevantFor", "${FixIsRelevantFor}")
    strParams = buildParams(strParams,"Branch", "${Branch}")
    strParams = buildParams(strParams,"MSIPath", "${MSIPath}")
    strParams = buildParams(strParams,"Type", "${Type}")
    strParams = buildParams(strParams,"NOFKbs", "${NOFKbs}")
    strParams = buildParams(strParams,"Email", "${Email}")
    strParams = buildParams(strParams,"BuildNumber", "${BuildNumber}")

    if (strParams!="") {
        strURL = strURL+"?" + strParams
    }
    println ("***********strURL: ${strURL}")
    return strURL
}


def kbGenService1(String serviceName){


    String strURL = generateURL(serviceName)

    def responseText = strURL.toURL().getText(requestProperties: ['Authorization': authenticationKBGen], 'UTF-8')
    File outResponseFile = new File ("${serviceName}.xml")
    outResponseFile.text =  responseText

    println ("***********strResult: ${strResult}")

}
/*
def kbGenService(String serviceName){

    String url = "http://<SONAR_URL>/api/qualitygates/project_status?projectKey=first"
    def json = new JsonSlurper().parseText(url.toURL().text)
    print json['projectStatus']['status']
} */