<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description>This job is used for fixture promote. The artifacts is always got promoted from the source to target repo. This is getting the source from ci_global, so make sure you have it a part of the fixture. If there is a change, need to update the root of gradle</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty plugin="naginator@1.14">
      <optOut>false</optOut>
    </com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.4.1">
      <useBuildBlocker>false</useBuildBlocker>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>sourceRepos</name>
          <description></description>
          <defaultValue>ci-release</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>targetRepos</name>
          <description></description>
          <defaultValue>cd-passed-pl</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>checkPipelineGreen</name>
          <description>If you can&apos;t check the pipeline, uncheck this box, the pipeline is always considered green</description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>PromoteOnSuccess</name>
          <description>Condition met, want to promote?</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>DevRootPath</name>
          <description></description>
          <defaultValue>D:\gitroot\Z_DEVOPS</defaultValue>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>true</blockBuildWhenUpstreamBuilding>
  <jdk>(Default)</jdk>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <customWorkspace>${DevRootPath}</customWorkspace>
  <builders>
    <org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder plugin="conditional-buildstep@1.3.3">
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.0"/>
      <runCondition class="org.jenkins_ci.plugins.run_condition.logic.Not" plugin="run-condition@1.0">
        <condition class="org.jenkins_ci.plugins.run_condition.core.BooleanCondition">
          <token>${isPipelineGreen}</token>
        </condition>
      </runCondition>
      <conditionalbuilders>
        <hudson.tasks.Shell>
          <command>echo &quot;Pipeline is not green&quot;
exit 1</command>
        </hudson.tasks.Shell>
      </conditionalbuilders>
    </org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder>
    <hudson.plugins.gradle.Gradle plugin="gradle@1.24">
      <description></description>
      <switches>-i</switches>
      <tasks>aPT -PsourceRepos=$sourceRepos -PtargetRepos=$targetRepos -PletPromote=$letPromote</tasks>
      <rootBuildScriptDir>${workspace}/ci_global/Scripts/ArtifactoryPromote</rootBuildScriptDir>
      <buildFile></buildFile>
      <gradleName>(Default)</gradleName>
      <useWrapper>true</useWrapper>
      <makeExecutable>false</makeExecutable>
      <fromRootBuildScriptDir>true</fromRootBuildScriptDir>
      <useWorkspaceAsHome>true</useWorkspaceAsHome>
    </hudson.plugins.gradle.Gradle>
  </builders>
  <publishers/>
  <buildWrappers>
    <hudson.plugins.build__timeout.BuildTimeoutWrapper plugin="build-timeout@1.14.1">
      <strategy class="hudson.plugins.build_timeout.impl.AbsoluteTimeOutStrategy">
        <timeoutMinutes>60</timeoutMinutes>
      </strategy>
      <operationList>
        <hudson.plugins.build__timeout.operations.WriteDescriptionOperation>
          <description>Build timed out (after {0} minutes). Marking the build as failed.</description>
        </hudson.plugins.build__timeout.operations.WriteDescriptionOperation>
      </operationList>
    </hudson.plugins.build__timeout.BuildTimeoutWrapper>
    <EnvInjectBuildWrapper plugin="envinject@1.90">
      <info>
        <groovyScriptContent>import hudson.model.ListView
import jenkins.model.*
import hudson.model.Fingerprint.RangeSet;
import hudson.model.Job;
import hudson.model.Fingerprint;
import hudson.model.Result;
import hudson.model.AbstractBuild;

view_name = &quot;${viewName}&quot;;
release_version = &quot;${promoteVersion}&quot;;
check_pipeline_green =&quot;${checkPipelineGreen}&quot; 

println &quot;     ## view_name  &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;: &quot; + view_name ;
println &quot;     ## release_version &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;: &quot; + release_version ;
println &quot;     ## check_pipeline_green &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;: &quot; + check_pipeline_green ;

//vc = Jenkins.instance.getView(view_name).getOwner();
//v = vc.getView(view_name);

objRtn = getViewFromViewName(view_name)
v = objRtn[0]

def isGreen=&quot;Yes&quot;

if (check_pipeline_green ==&quot;true&quot;)
{
  for(jobItem in v.getItems()) {
    if (!isJobGreen(jobItem.getName(),release_version, jobItem )){
  	isGreen=&quot;No&quot;
        break;
    }  
  }
}
def map  =[isPipelineGreen:isGreen ] 

return map

def boolean isJobGreen (String sBuildName, String sReleaseVersion, Object jobItem){
  
  jobName = &quot;${sBuildName}&quot;
  releaseVersion= &quot;${sReleaseVersion}&quot;

  if (jobName.contains(&quot;_(ArtifactoryPromotion)&quot;)){
     println &quot;     ## Ignoring the job : $jobName &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;:&quot;
     return true
  }
  
//  def jobItem = jenkins.model.Jenkins.instance.getItem(jobName);
 // def jobItem = v.getItem(jobName);
  
  def lastBuildNumber = jobItem.getLastBuild().getNumber()
  def firstBuildNumber = jobItem.getFirstBuild().getNumber()
  
  def buildRange = &quot;${firstBuildNumber}-${lastBuildNumber}&quot;
  
  def range = RangeSet.fromString(buildRange, true);
  
  def isSuccess=true
  def foundIt=false
  
  jobItem.getBuilds(range).each {
    if ( it.getDisplayName().find(/${releaseVersion}.*/)) {
      foundIt=true //already found so won&apos;t come to the else 	          
      println &quot;     ## Getting Display &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;: &quot; + it.getDisplayName();
      returnBuildNumber=it.getNumber()
      AbstractBuild b = it
      
      if (!b.isBuilding()) {
        Result r = b.getResult();
        if (r == Result.SUCCESS) {          
        	isSuccess=true  
        }else{
        	isSuccess=false
        }
      }            
      
    }else if (!foundIt)
    {
    	isSuccess=false
    }
  }
  
  println (&quot;               =========================&gt; isGreen?=&quot; + isSuccess + &quot; : $jobName &quot;)
  
  return isSuccess
    
}

def getViewFromViewName(String view_name){
  //First, check to see if there is a dash \ in the view_name, indicator of the folder
  def viewNameFolders = []
  def folderArray = []
  def arrRtn = new Object [2]
  
  viewNameFolders = view_name.split(&quot;/view/&quot;)
  def viewName = viewNameFolders[viewNameFolders.length-1]
  println (&quot;viewName:$viewName&quot;)
  
  def folderNamesString = &quot;&quot;
  def folderNamesRtn = &quot;&quot;
  
  println (&quot;folderString:&quot; + viewNameFolders[0])
  def folderObj = Jenkins.instance
  if ((viewNameFolders.length-1)&gt;0){
    folderArray = viewNameFolders[0].split(&quot;/job/&quot;)
    folderNamesRtn = viewNameFolders[0]
    
    //println (&quot;folderArray.length:&quot; + folderArray.length)
  
    for (i = 0; i &lt;folderArray.length; i++) {
      //get the folderName
      folderName = folderArray[i]
      //println (&quot;folderName:$folderName&quot;)
      if (folderName!=&quot;&quot;){
          folderObj= getFolder(folderObj,folderName )
          if (folderNamesString==&quot;&quot;) {
              folderNamesString=folderName
          }else{
              folderNamesString=folderNamesString + folderName
          }
        
      }
    }
  }
  
      
  //get the viewName
  def viewObj = folderObj.getView(viewName)
  
  println (&quot;viewObj:&quot; + viewObj.getViewName())
  println (&quot;folderNamesString:$folderNamesString&quot;)
  
  arrRtn[0]=viewObj
  arrRtn[1]=folderNamesRtn
  return  arrRtn;
	  
}


def getFolder(Object folderObject, String folderName){
    def rtnObj = null
    def boolean gotIt = false
	vItemList = folderObject.getItems()
	vItemList.each() { 
      try {
        if (!gotIt){
            String sfolderName = it.getName();
  //      	println (&quot;sfolderName:$sfolderName&quot;)
	    vFolderList = it.getViews()
       		if (folderName ==sfolderName) {      
    //          println (&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;sfolderName:$sfolderName&quot;)
        	  rtnObj=it
         		gotIt = true     
        	}
        }
      }catch (Exception e) {
        //println (&quot;Error - not a folder &quot; + it.toString()) 		 
      }
	}
  
    return rtnObj
}</groovyScriptContent>
        <loadFilesFromMaster>false</loadFilesFromMaster>
      </info>
    </EnvInjectBuildWrapper>
  </buildWrappers>
</project>